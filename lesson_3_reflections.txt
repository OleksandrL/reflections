When would you want to create a remote repository rather than keeping all your work local?
  
	Віддалений репозиторій створюють тоді, коли потрібно поділитися кодом, проектом із зовнішніми суб'єктами. Тоді ваші
	співробітники можуть використовувати уже створений проект і одночасно з ним працювати, використовувати у своїх цілях.
	А також це зручно для роботи з проектом з різних комп'ютерів.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Тому що ви можете щось зробити за одним комп'ютером, закинути на ГітХаб, а потім знайти краще рішення, чи взагалі
	видалити все зроблене. Тому забирати на локалку краще вручну, коли є впевненість у вірності. Так само, оновлення б
	стосувалося усіх контриб'юторів, тобто оновлення проходило б на всіх локалках. Тому контриб'ютору довантажувалися б,
	наприклад, непотрібні коміти. Або для того, щоб можна було відновити робочу версію без пошуків ID, а просто закинути 
	на ГітХаб більш ранню версію. Автоматичне оновлення не дозволило б цього зробити.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Форк використовується для створення копії репозиторію на ГітХабі для того, щоб модифікувати цю версію для своїх потреб.
	Особливістю є те, що в репозиторії, який ви скопіювали, зберігається посилання на ваш скопійований репозиторій. Викори-
	стовується для швидкого копіювання.
	Клонування використовується для створення копії репозиторію з ГітХабу на локалку чи навіть копії на самій локалці.
	Репозиторій просто копіюється без усіляких посилань на ваш репозиторій. Використовується для роботи на локалці.
	Бранч використовується для паралельної роботи з основною гілкою процесу: для тестування, для створення іншої
	версії, для роботи над новою фічею.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Можна побачити наскільки ви напрацювали відносно того, що збережено вами ж
	на ГітХабі без доступу в інтернет. Також побачити чи є ймовірність виникнення
	конфлікту при мерджі гілок з комп'ютера і з ГітХаба, або наскільки вони відрі-
	зняються. Завжди можна перевірити різницю між локалкою та відомою версією на
	ГітХабі.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Без використання Гіт та ГітХабу потрібно буде відсилати файли своїм колегам і чекати на їхню
	відповідь, при цьому потрібно підтримувати комунікацію, де були зміни, що невірно і в якому місці,
	яка зараз версія робоча.
	Простіше без команд і уявлення про Гіт та ГітХаб. Складніше буде сам процес налаштування, контроль
	версій та змін до них. Невідомо буде, яка версія є робочою, а не експериментальною.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Зміни в окремому бранчі повинні бути зроблені тоді, коли невідомо, чи підтримають ці зміни інші
	члени команди розробників, а також, щоб не понівечити головну гілку проекту. Для цього використовують
	запит на мердж, який дозволяє іншим розробникам перевіряти зміни, які ви хочете внести. Також дана
	методика застосовується тоді, коли відбувається одночасна робота над проектом, що може викликати
	конфлікти. Для їх розв'язання використовують запити на мерджі. Хтось із команди вирішує конфлікт.
	Переваги цього підходу: надійність, вищий степень контролю та комунікації в команді.
	Переваги прямого мерджу у головну гілку: простота.
